@charset "UTF-8";














@mixin clearfix {
    &:after {
        visibility: hidden;
        display: block;
        height: 0;
        font-size: 0;
        content: '\0020';
        clear: both;
    }
}



















@mixin ellipsis($width: 100%) {
    display: inline-block;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
}







































@mixin multi-line-ellipsis(
    $line-height: 1.2em,
    $line-count: 2,
    $bg-color: #fff
) {
    overflow: hidden;
    position: relative;
    line-height: $line-height;
    max-height: $line-height * $line-count;
    text-align: justify;
    padding-right: 0em;

    &:before {
        content: '...';
        position: absolute;
        right: 0;
        bottom: 0;
        background: $bg-color;
    }

    &:after {
        content: '';
        position: absolute;
        right: 0;
        width: 1em;
        height: 1em;
        margin-top: 0.2em;
        background: $bg-color;
    }
}













@mixin hide-text {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}























@mixin center-tl(
    $inner-selector: '.inner',
    $horizontal: true
) {

    position: relative;

    & > #{$inner-selector} {
        position: absolute;
        top: 50%;
        $translate-val: translateY(-50%);

        @if $horizontal {
            left: 50%;
            $translate-val: translate(-50%, -50%);
        }

        transform: $translate-val;
    }

}






















@mixin center-td(
    $inner-selector: '.inner',
    $horizontal: true
) {

    @if $horizontal {
        text-align: center;
    }

    display: table;

    & > #{$inner-selector} {
        display: table-cell;
        vertical-align: middle;
    }

}
















@mixin size($size) {

    @if length($size) == 1 {
        width: $size;
        height: $size;
    } @else if length($size) == 2 {
        width: nth($size, 1);
        height: nth($size, 2);
    }

}























@mixin position($position: relative, $coordinates: null null null null) {

    
    @if type-of($position) == list {
        $coordinates: $position;
        $position: relative;
    }

    $coordinates: unpack($coordinates);

    $offsets: (
        top: nth($coordinates, 1),
        right: nth($coordinates, 2),
        bottom: nth($coordinates, 3),
        left: nth($coordinates, 4)
    );

    position: $position;

    @each $offset, $value in $offsets {

        
        @if is-length($value) {
            #{$offset}: $value;
        }
    }
}































@mixin triangle($size, $color, $direction) {
    $width: nth($size, 1);
    $height: nth($size, length($size));
    $foreground-color: nth($color, 1);
    $background-color: if(length($color) == 2, nth($color, 2), transparent);
    height: 0;
    width: 0;

    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
        $width: $width / 2;
        $height: if(length($size) > 1, $height, $height/2);

        @if $direction == up {
            border-bottom: $height solid $foreground-color;
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
        } @else if $direction == right {
            border-bottom: $width solid $background-color;
            border-left: $height solid $foreground-color;
            border-top: $width solid $background-color;
        } @else if $direction == down {
            border-left: $width solid $background-color;
            border-right: $width solid $background-color;
            border-top: $height solid $foreground-color;
        } @else if $direction == left {
            border-bottom: $width solid $background-color;
            border-right: $height solid $foreground-color;
            border-top: $width solid $background-color;
        }
    } @else if ($direction == up-right) or ($direction == up-left) {
        border-top: $height solid $foreground-color;

        @if $direction == up-right {
            border-left: $width solid $background-color;
        } @else if $direction == up-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == down-right) or ($direction == down-left) {
        border-bottom: $height solid $foreground-color;

        @if $direction == down-right {
            border-left: $width solid $background-color;
        } @else if $direction == down-left {
            border-right: $width solid $background-color;
        }
    } @else if ($direction == inset-up) {
        border-color: $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-down) {
        border-color: $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $height $width;
    } @else if ($direction == inset-right) {
        border-color: $background-color $background-color $background-color $foreground-color;
        border-style: solid;
        border-width: $width $height;
    } @else if ($direction == inset-left) {
        border-color: $background-color $foreground-color $background-color $background-color;
        border-style: solid;
        border-width: $width $height;
    }
}

@mixin box-sizing {
    box-sizing: border-box;
    *,
    *:before,
    *:after {
        box-sizing: border-box;
    }
}

@mixin global-font {
    color: $color-n2-4;
    font-family: $font-family-base;
    font-size: $font-size-base-body1;
    line-height: $font-lineheight-base;
}

@mixin link {
    color: $color-f4-1;
    text-decoration: none;
    &:hover {
        color: $color-f4-2;
    }
    &:active {
        color: $color-f4-2;
        text-decoration: underline;
    }
}


@mixin link-with-visited {
    text-decoration: none;
    &:link {
        color: $color-f4-1;
    }
    &:visited {
        color: $color-f4-3;
    }
    &:hover {
        color: $color-f4-2;
    }
    &:active {
        color: $color-f4-2;
        text-decoration: underline;
    }
}

@mixin icon-handler($size, $baseSize: $icon-s, $offset: 0) {

    &:before {
        width: $size;
        font-size: $size;
        line-height: inherit;
    }

    
    @if ($size < 12) {
        @media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
            transform: scale($size / $baseSize) translateX($offset * 2);

            &:before {
                width: $baseSize;
                font-size: $baseSize;
            }
        }
    }
}


@mixin icon-size-handler($size, $baseSize: $icon-s) {
    @if ($size < 12) {
        width: $baseSize;
        font-size: #{$size} \9;
        transform: scale($size/$baseSize);
    } @else {
        width: $size;
        font-size: $size;
    }
    line-height: inherit;
}
